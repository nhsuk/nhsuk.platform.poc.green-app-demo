<policies>
	<inbound>
		<base />
		<trace source="GreenAppDemo">
			<message>HELLO WORLD!</message>
		</trace>
		<!-- Initialize a variable to store carbon intensities -->
		<set-variable name="carbonData" value="@{
			return JObject.Parse("{}");
		}" />
		<!-- Call external API for each region -->
		<!-- North West England -->
		<send-request mode="new" response-variable-name="northWestEnglandResponse" timeout="10" ignore-error="false">
			<set-url>https://api.carbonintensity.org.uk/regional/regionid/3</set-url>
			<set-method>GET</set-method>
		</send-request>
		<set-variable name="carbonData" value="@{
            var json = JObject.Parse(((IResponse)context.Variables["northWestEnglandResponse"]).Body.As<string>());
            var intensity = json["data"][0]["data"][0]["intensity"]["forecast"].ToString();
            var carbonData = context.Variables.GetValueOrDefault<JObject>("carbonData");
            carbonData["NorthWestEngland"] = intensity;
            return carbonData;
        }" />
		<!-- South West England -->
		<send-request mode="new" response-variable-name="southWestEnglandResponse" timeout="10" ignore-error="false">
			<set-url>https://api.carbonintensity.org.uk/regional/regionid/11</set-url>
			<set-method>GET</set-method>
		</send-request>
		<set-variable name="carbonData" value="@{
            var json = JObject.Parse(((IResponse)context.Variables["southWestEnglandResponse"]).Body.As<string>());
            var intensity = json["data"][0]["data"][0]["intensity"]["forecast"].ToString();
            var carbonData = context.Variables.GetValueOrDefault<JObject>("carbonData");
            carbonData["SouthWestEngland"] = intensity;
            return carbonData;
        }" />
		<!-- South Wales -->
		<send-request mode="new" response-variable-name="southWalesResponse" timeout="10" ignore-error="false">
			<set-url>https://api.carbonintensity.org.uk/regional/regionid/7</set-url>
			<set-method>GET</set-method>
		</send-request>
		<set-variable name="carbonData" value="@{
            var json = JObject.Parse(((IResponse)context.Variables["southWalesResponse"]).Body.As<string>());
            var intensity = json["data"][0]["data"][0]["intensity"]["forecast"].ToString();
            var carbonData = context.Variables.GetValueOrDefault<JObject>("carbonData");
            carbonData["SouthWales"] = intensity;
            return carbonData;
        }" />
		<!-- Determine region with minimum carbon intensity -->
		<set-variable name="greenestRegion" value="@{
			var data = context.Variables.GetValueOrDefault<JObject>("carbonData");
			var minRegion = data.Properties().OrderBy(p => (int)p.Value).First().Name;
			return minRegion;
		}" />
		<!-- Route to the backend for the selected region -->
		<choose>
			<when condition="@(context.Variables.GetValueOrDefault<string>("greenestRegion") == "NorthWestEngland")">
				<set-backend-service base-url="https://backend-northwestengland.example.com" />
			</when>
			<when condition="@(context.Variables.GetValueOrDefault<string>("greenestRegion") == "SouthWestEngland")">
				<set-backend-service base-url="https://backend-southwestengland.example.com" />
			</when>
			<when condition="@(context.Variables.GetValueOrDefault<string>("greenestRegion") == "South Wales")">
				<set-backend-service base-url="https://backend-southwales.example.com" />
			</when>
		</choose>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>